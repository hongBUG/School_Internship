package cn.tentact.nebula.shiro

import cn.tentact.nebula.privilege.I_PrivilegeService
import java.util.Map
import org.apache.shiro.authc.AuthenticationException
import org.apache.shiro.authc.AuthenticationToken
import org.apache.shiro.authc.SimpleAuthenticationInfo
import org.apache.shiro.authz.SimpleAuthorizationInfo
import org.apache.shiro.realm.AuthorizingRealm
import org.apache.shiro.subject.PrincipalCollection
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.data.redis.core.RedisTemplate

/**
 * JWT的Realm类
 */
class JwtRealm extends AuthorizingRealm {
	@Autowired
	RedisTemplate redisTemplate;

	@Autowired
	I_PrivilegeService i_PrivilegeService;

	/**
	 * 大坑！，必须重写此方法，不然Shiro会报错
	 */
	override supports(AuthenticationToken token) {
		return token instanceof JwtToken;
	}

	/**
	 * 授权方法
	 * 只有当需要检测用户权限的时候才会调用此方法，例如checkRole,checkPermission之类的
	 */
	override doGetAuthorizationInfo(PrincipalCollection principals) {
		var username = JwtUtil.getUsername(principals.toString());
		var privilege = i_PrivilegeService.searchUserPrivilege(username); // 查询用户权限
		var info = new SimpleAuthorizationInfo();
		info.addStringPermissions(privilege);
		return info;
	}

	/**
	 * 认证方法
	 * 默认使用此方法进行用户名正确与否验证，错误抛出异常即可。
	 */
	override doGetAuthenticationInfo(AuthenticationToken auth) throws AuthenticationException {
		var token = auth.getCredentials() as String;
		// 解密获得username，用于和数据库进行对比
		var username = JwtUtil.getUsername(token);

		if(username === null) {
			throw new AuthenticationException("token invalid"); // 错误的令牌
		}

		// 到Redis中验证令牌
		var cache = redisTemplate.opsForHash.entries(username) as Map;
		if(cache === null) {
			throw new AuthenticationException("User didn't existed!"); // 无效的令牌（Redis中没有该令牌的信息）
		}
		var password = cache.get("password") as String; // 从Redis中取出用户密码
		if(! JwtUtil.verify(token, username, password)) {
			throw new AuthenticationException("Username or password error"); // 无效的令牌（用户名和密码核对不上）
		}

		return new SimpleAuthenticationInfo(token, token, "jwt_realm");
	}
}
